###
#Проверка кода 
###
name: MyPj4D
on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  schedule:
    - cron: 00 23 * * *
jobs:          
  Linter:  # Причесываем код для проверок 
     name: Lint
     runs-on: ubuntu-latest

     permissions:
      contents: read
      packages: read
      # To report GitHub Actions status checks
      statuses: write

     steps:
          - uses: actions/checkout@v4
            with:
            # super-linter needs the full git history to get the
            # list of files that changed across commits
              fetch-depth: 0
  
            name: Super-linter
          - uses: super-linter/super-linter@v7.2.1 # x-release-please-version
            env:
                VALIDATE_ALL_CODEBASE: false
                DEFAULT_BRANCH: "master"
                # To report GitHub Actions status checks
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            continue-on-error: true # не прерываем на ошибке. 

#  analyze:
#    needs: Linter
#    name: Analyze (${{ matrix.language }})
#    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
#    permissions:
#      security-events: write
#      packages: read
#      actions: read
#      contents: read
#    strategy:
#      fail-fast: false
#      matrix:
#        include:
#        - language: javascript-typescript
#          build-mode: none
#        - language: python
#          build-mode: none
#    steps:
#    - name: Checkout repository
#      uses: actions/checkout@v4
#    - name: Initialize CodeQL
#      uses: github/codeql-action/init@v3
#      with:
#        languages: ${{ matrix.language }}
#        build-mode: ${{ matrix.build-mode }}
#    - if: matrix.build-mode == 'manual'
#      shell: bash
#      run: |
#        echo 'If you are using a "manual" build mode for one or more of the' \
#          'languages you are analyzing, replace this with the commands to build' \
#          'your code, for example:'
#        echo '  make bootstrap'
#        echo '  make release'
#        exit 1
#    - name: Perform CodeQL Analysis
#      uses: github/codeql-action/analyze@v3
#      with:
#        category: "/language:${{matrix.language}}"
        
###
#Проверка на наличие утечек 
###
  Gitleaks:
      needs: SonarQB
      name: gitleaks
      runs-on: ubuntu-latest
      steps:
          - uses: actions/checkout@v4
            with:
              fetch-depth: 0
          - uses: gitleaks/gitleaks-action@v2
            id: gitleaks
            env:
              #GITLEAKS_ENABLE_UPLOAD_ARTIFACT: false
              #GITLEAKS_ENABLE_COMMENTS: false
              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            continue-on-error: true
          - name: Create Gitleaks report
            run: |
              mkdir -p gitleaks-report
              echo "${{ steps.gitleaks.outputs.report }}" > gitleaks-report/report.json
          - name: Split report into smaller parts
            run: |
              split -b 1M gitleaks-report/report.json gitleaks-report/part_ --additional-suffix=.json
            #
          - name: Upload Gitleaks report parts as artifacts
            uses: actions/upload-artifact@v4
            with:
              name: gitleaks-report
              path: gitleaks-report/part_*
 
  SonarQB:
      needs: Linter
      name: SonarQube
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v4
          with:
            fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
        - name: SonarQube Scan
          uses: SonarSource/sonarqube-scan-action@v4
          env:
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  ###
  # SAST
  ###
  #Semgrep:
        #job:
         # semgrep:
          #needs: [analyze, Gitleaks, SonarQB ]
   #       name: semgrep/ci
    #      runs-on: ubuntu-latest
     #     env:
     #       SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
      #    container:
       #     image: returntocorp/semgrep
       #   steps:
       #   - uses: actions/checkout@v4
       #   - run: semgrep ci
  #
  Checkout:
      needs: SonarQB
      name: Checkout
      runs-on: ubuntu-latest
      steps:
       - uses: actions/checkout@v4.2.2
